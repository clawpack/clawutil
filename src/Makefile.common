#
# Makefile.common for the clawpack code
# This file is generally "included" in Makefiles for libraries or apps.
#
# See the end of this file for a summary, or type "make help".


# General makefile settings
SHELL = /bin/sh
INSTALL_PROGRAM ?= $(INSTALL)
INSTALL_DATA ?= $(INSTALL) -m 644

# Fortran compiler:  FC may be set as an environment variable or in make
# file that 'includes' this one.
FC ?= gfortran
CLAW_FC ?= $(FC)
LINK ?= $(CLAW_FC)

# Path to version of python to use:  May need to use something other than
# the system default in order for plotting to work.  Can set CLAW_PYTHON as
# environment variable or in make file that 'includes' this one.
PYTHON ?= python
CLAW_PYTHON ?= $(PYTHON)

# Variables below should be set in Makefile that "includes" this one.
# Default values if not set:
EXECUTABLE ?= xclaw
CLAW_PKG ?= classic
OUT_DIR ?= _output
PLOT_DIR ?= _plots
LIB_PATHS ?= $(CURDIR)/
OVERWRITE ?= True
RESTART ?= False
SETRUN_FILE ?= ./setrun.py
SETPLOT_FILE ?= ./setplot.py

#----------------------------------------------------------------------------
# Lists of source, modules, and objects
# These should be set in the including Makefile
SOURCES ?=
MODULES ?=

# Make list of .o files required from the sources above:
OBJECTS = $(subst .f,.o, $(subst .f90,.o, $(SOURCES)))
MODULE_FILES = $(subst .f90,.mod, $(MODULES))
MODULE_PATHS = $(dir $(MODULE_FILES))
MODULE_OBJECTS = $(subst .f90,.o, $(MODULES))

#----------------------------------------------------------------------------
# Compiling, linking, and include flags
# User set flags, empty if not set
INCLUDE ?=
FFLAGS ?=
LFLAGS ?= $(FFLAGS)

# These will be included in all actual compilation and linking, one could
# actually overwrite these before hand but that is not the intent of these
# variables
ALL_INCLUDE ?=
ALL_FFLAGS ?=
ALL_LFLAGS ?=

# Add includes, the module search paths and library search paths are appended
# at the end of the ALL_INCLUDE variable so that INCLUDE can override any of
# the default settings
ALL_INCLUDE += $(INCLUDE)
ALL_INCLUDE += $(addprefix -I,$(MODULE_PATHS)) $(addprefix -I,$(LIB_PATHS))

# ALL_FFLAGS and ALL_LFLAGS currently only includes the user defined flags
ALL_FFLAGS += $(FFLAGS)
ALL_LFLAGS += $(LFLAGS)

# Module flag setting, please add other compilers here as necessary
ifeq ($(CLAW_FC),gfortran)
	# There should be no space between this flag and the argument
	MODULE_FLAG = -J
else ifeq ($(CLAW_FC),ifort)
	# Note that there shoud be a space after this flag
	MODULE_FLAG = -module 
else
	@echo "WARNING: Unknown Fortran compiler $(CLAW_FC), cannot set module include flag."
endif

#----------------------------------------------------------------------------
# Targets that do not correspond to file names:
.PHONY: .objs .exe clean clobber new all output plots;

# Reset suffixes that we understand
.SUFFIXES:
.SUFFIXES: .f90 .f .mod .o

# Default Rules, the module rule should be executed first in most instances,
# this way the .mod file ends up always in the correct spot
%.mod : %.f90 ; $(CLAW_FC) -c $< $(MODULE_FLAG)$(@D) $(ALL_INCLUDE) $(ALL_FFLAGS) -o $*.o
%.o : %.f90 ;   $(CLAW_FC) -c $< 					$(ALL_INCLUDE) $(ALL_FFLAGS) -o $@
%.o : %.f ;     $(CLAW_FC) -c $< 					$(ALL_INCLUDE) $(ALL_FFLAGS) -o $@

#----------------------------------------------------------------------------
# Executable:

.objs:  $(MODULE_FILES) $(OBJECTS);

# The order here is to again build the module files correctly
$(EXECUTABLE): $(MODULE_FILES) $(MODULE_OBJECTS) $(OBJECTS) $(MAKEFILE_LIST) ;
	$(LINK) $(MODULE_OBJECTS) $(OBJECTS) $(ALL_INCLUDE) $(ALL_LFLAGS) -o $(EXECUTABLE)

debug:
	@echo 'debugging -- MODULES:'
	@echo $(MODULES)
	@echo 'debugging -- MODULE_FILES:'
	@echo $(MODULE_FILES)
	@echo 'debugging -- MODULE_PATHS:'
	@echo $(MODULE_PATHS)

#----------------------------------------------------------------------------

# Command to create *.html files from *.f etc:
CC2HTML = $(CLAW_PYTHON) $(CLAW)/doc/clawcode2html.py --force 

# make list of html files to be created by 'make .htmls':
HTML = \
  $(subst .f,.f.html,$(wildcard *.f)) \
  $(subst .f95,.f95.html,$(wildcard *.f95)) \
  $(subst .f90,.f90.html,$(wildcard *.f90)) \
  $(subst .m,.m.html,$(wildcard *.m)) \
  $(subst .py,.py.html,$(wildcard *.py)) \
  $(subst .data,.data.html,$(wildcard *.data)) \
  $(subst .txt,.html,$(wildcard *.txt)) \
  $(subst .sh,.sh.html,$(wildcard *.sh)) \
  Makefile.html

# Rules to make html files:  
# e.g. qinit.f --> qinit.f.html
%.f.html : %.f ; $(CC2HTML) $<              
%.f95.html : %.f95 ; $(CC2HTML) $<
%.f90.html : %.f90 ; $(CC2HTML) $<
%.m.html : %.m ; $(CC2HTML) $<
%.py.html : %.py ; $(CC2HTML) $<
%.data.html : %.data ; $(CC2HTML) $<
%.sh.html : %.sh ; $(CC2HTML) $<
Makefile.html : Makefile ; $(CC2HTML) $<    
# drop .txt extension, e.g. README.txt --> README.html
%.html : %.txt ; $(CC2HTML) --dropext $<    

.htmls: $(HTML) ;

#----------------------------------------------------------------------------

# Make data files needed by Fortran code:
.data: $(SETRUN_FILE) $(MAKEFILE_LIST) ;
	$(CLAW_PYTHON) $(SETRUN_FILE) $(CLAW_PKG)
	touch .data

#----------------------------------------------------------------------------
# Run the code and put fort.* files into subdirectory named output:
# runclaw will execute setrun.py to create data files and determine
# what executable to run, e.g. xclaw or xamr.
.output: $(EXECUTABLE) .data $(MAKEFILE_LIST);
	@echo $(OUT_DIR) > .output
	$(CLAW_PYTHON) $(CLAW)/clawutil/src/python/runclaw.py  $(EXECUTABLE) $(OUT_DIR)\
	$(OVERWRITE) $(RESTART)

#----------------------------------------------------------------------------
# Run the code without checking dependencies:
output: 
	$(CLAW_PYTHON) $(CLAW_DIR)/python/pyclaw/runclaw.py $(EXECUTABLE) $(OUT_DIR) \
	$(OVERWRITE) $(RESTART)

#----------------------------------------------------------------------------

# Python command to create plots:

# (Removed Cygwin stuff...)
# Plotting command
PLOTCMD ?= $(CLAW_PYTHON) $(CLAW)/python/pyclaw/plotters/plotclaw.py

# Rule to make the plots into subdirectory specified by PLOT_DIR,
# using data in subdirectory specified by OUT_DIR and the plotting
# commands specified in CLAW_SETPLOT.

.plots: .output $(SETPLOT_FILE) $(MAKEFILE_LIST) ;
	$(PLOTCMD) $(OUT_DIR) $(PLOT_DIR) $(SETPLOT_FILE)
	@echo $(PLOT_DIR) > .plots

# Make the plots without checking dependencies:
plots:
	$(PLOTCMD) $(OUT_DIR) $(PLOT_DIR) $(SETPLOT_FILE)

#----------------------------------------------------------------------------

# Rule to make full program by catenating all source files.
# Sometimes useful for debugging:
# Note that this will probably not compile due to mixed source forms

.program:  $(MODULES) $(SOURCES) $(MAKEFILE_LIST);
	cat  $(MODULES) $(SOURCES) claw_program.f90
	touch .program

#----------------------------------------------------------------------------

# Recompile everything:

new: 
	-rm -f  $(OBJECTS)
	-rm -f  $(MODULE_OBJECTS)
	-rm -f  $(MODULE_FILES)
	-rm -f  $(EXECUTABLE)
	$(MAKE) $(EXECUTABLE)


# Clean up options:
clean:
	-rm -f $(EXECUTABLE) $(HTML)
	-rm -f .data .output .plots .htmls 

clobber:
	$(MAKE) clean
	-rm -f $(OBJECTS)
	-rm -f $(MODULE_OBJECTS)
	-rm -f $(MODULE_FILES)
	-rm -f fort.*  *.pyc pyclaw.log 
	-rm -f -r $(OUT_DIR) $(PLOT_DIR)

#----------------------------------------------------------------------------

# Deprecate 'make all' option since this is often defined in user file:
#all:
#	$(MAKE) .plots
#	$(MAKE) .htmls

#----------------------------------------------------------------------------

help: 
	@echo '   "make .objs"    to compile object files'
	@echo '   "make .exe"     to create executable'
	@echo '   "make .data"    to create data files using setrun.py'
	@echo '   "make .output"  to run code'
	@echo '   "make output"   to run code with no dependency checking'
	@echo '   "make .plots"   to produce plots'
	@echo '   "make plots"    to produce plots with no dependency checking'
	@echo '   "make .htmls"   to produce html versions of files'
	@echo '   "make .program" to produce single program file'
	@echo '   "make new"      to remove all objs and then make .exe'
	@echo '   "make clean"    to clean up compilation and html files'
	@echo '   "make clobber"  to also clean up output and plot files'
	@echo '   "make help"     to print this message'

.help: help

